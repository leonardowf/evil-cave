//
// UntitledView.m
// Generated by Core Animator version 1.0 on 5/11/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

#import "LWFAnimationArrowInventory.h"

@interface LWFAnimationArrowInventory ()
@property (strong, nonatomic) NSMapTable *completionBlocksByAnimation;
@end

@implementation LWFAnimationArrowInventory

#pragma mark - Life Cycle

- (instancetype)init
{
	return [self initWithFrame:CGRectMake(0,0,80,80)];
}

- (instancetype)initWithFrame:(CGRect)frame
{
	self = [super initWithFrame:frame];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

#pragma mark - Scaling

- (void)layoutSubviews
{
	[super layoutSubviews];

	UIView *scalingView = self.viewsByName[@"__scaling__"];
	float xScale = self.bounds.size.width / scalingView.bounds.size.width;
	float yScale = self.bounds.size.height / scalingView.bounds.size.height;
	switch (self.contentMode) {
		case UIViewContentModeScaleToFill:
			break;
		case UIViewContentModeScaleAspectFill:
		{
			float scale = MAX(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
		default:
		{
			float scale = MIN(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
	}
	scalingView.transform = CGAffineTransformMakeScale(xScale, yScale);
	scalingView.center = CGPointMake(CGRectGetMidX(self.bounds), CGRectGetMidY(self.bounds));
}

#pragma mark - Setup

- (void)setupHierarchy
{
	self.completionBlocksByAnimation = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory valueOptions:NSPointerFunctionsStrongMemory];
	NSMutableDictionary *viewsByName = [NSMutableDictionary dictionary];
	NSBundle *bundle = [NSBundle bundleForClass:[self class]];

	UIView *__scaling__ = [UIView new];
	__scaling__.bounds = CGRectMake(0, 0, 80, 80);
	__scaling__.center = CGPointMake(40.0, 40.0);
	__scaling__.layer.masksToBounds = YES;
	[self addSubview:__scaling__];
	viewsByName[@"__scaling__"] = __scaling__;

	UIImageView *importedLayers = [UIImageView new];
	importedLayers.bounds = CGRectMake(0, 0, 37.0, 61.0);
	UIImage *imgImportedLayers = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"Imported Layers.png" ofType:nil]];
	importedLayers.image = imgImportedLayers;
	importedLayers.contentMode = UIViewContentModeCenter;
	importedLayers.layer.position = CGPointMake(24.022, 66.342);
	importedLayers.transform = CGAffineTransformMakeScale(0.14, 0.14);
	[__scaling__ addSubview:importedLayers];
	viewsByName[@"Imported Layers"] = importedLayers;

	self.viewsByName = viewsByName;
}

#pragma mark - Grow

- (void)addGrowAnimation
{
	[self addGrowAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addGrowAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addGrowAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addGrowAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addGrowAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addGrowAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addGrowAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addGrowAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
	CAMediaTimingFunction *easeInTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 0.500;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"Grow"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"Grow"]];
	}

	CAKeyframeAnimation *importedLayersRotationAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.rotation.z"];
	importedLayersRotationAnimation.duration = 0.500;
	importedLayersRotationAnimation.values = @[@(0.168), @(0.116)];
	importedLayersRotationAnimation.keyTimes = @[@(0.000), @(1.000)];
	importedLayersRotationAnimation.timingFunctions = @[linearTiming];
	importedLayersRotationAnimation.beginTime = beginTime;
	importedLayersRotationAnimation.fillMode = fillMode;
	importedLayersRotationAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"Imported Layers"] layer] addAnimation:importedLayersRotationAnimation forKey:@"Grow_Rotation"];

	CAKeyframeAnimation *importedLayersScaleXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.x"];
	importedLayersScaleXAnimation.duration = 0.500;
	importedLayersScaleXAnimation.values = @[@(0.136), @(1.000)];
	importedLayersScaleXAnimation.keyTimes = @[@(0.000), @(1.000)];
	importedLayersScaleXAnimation.timingFunctions = @[easeInTiming];
	importedLayersScaleXAnimation.beginTime = beginTime;
	importedLayersScaleXAnimation.fillMode = fillMode;
	importedLayersScaleXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"Imported Layers"] layer] addAnimation:importedLayersScaleXAnimation forKey:@"Grow_ScaleX"];

	CAKeyframeAnimation *importedLayersScaleYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.y"];
	importedLayersScaleYAnimation.duration = 0.500;
	importedLayersScaleYAnimation.values = @[@(0.136), @(1.000)];
	importedLayersScaleYAnimation.keyTimes = @[@(0.000), @(1.000)];
	importedLayersScaleYAnimation.timingFunctions = @[linearTiming];
	importedLayersScaleYAnimation.beginTime = beginTime;
	importedLayersScaleYAnimation.fillMode = fillMode;
	importedLayersScaleYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"Imported Layers"] layer] addAnimation:importedLayersScaleYAnimation forKey:@"Grow_ScaleY"];

	CAKeyframeAnimation *importedLayersTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	importedLayersTranslationXAnimation.duration = 0.500;
	importedLayersTranslationXAnimation.values = @[@(0.000), @(16.078)];
	importedLayersTranslationXAnimation.keyTimes = @[@(0.000), @(1.000)];
	importedLayersTranslationXAnimation.timingFunctions = @[easeInTiming];
	importedLayersTranslationXAnimation.beginTime = beginTime;
	importedLayersTranslationXAnimation.fillMode = fillMode;
	importedLayersTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"Imported Layers"] layer] addAnimation:importedLayersTranslationXAnimation forKey:@"Grow_TranslationX"];

	CAKeyframeAnimation *importedLayersTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	importedLayersTranslationYAnimation.duration = 0.500;
	importedLayersTranslationYAnimation.values = @[@(0.000), @(-26.533)];
	importedLayersTranslationYAnimation.keyTimes = @[@(0.000), @(1.000)];
	importedLayersTranslationYAnimation.timingFunctions = @[linearTiming];
	importedLayersTranslationYAnimation.beginTime = beginTime;
	importedLayersTranslationYAnimation.fillMode = fillMode;
	importedLayersTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"Imported Layers"] layer] addAnimation:importedLayersTranslationYAnimation forKey:@"Grow_TranslationY"];
}

- (void)removeGrowAnimation
{
	[self.layer removeAnimationForKey:@"Grow"];
	[[self.viewsByName[@"Imported Layers"] layer] removeAnimationForKey:@"Grow_Rotation"];
	[[self.viewsByName[@"Imported Layers"] layer] removeAnimationForKey:@"Grow_ScaleX"];
	[[self.viewsByName[@"Imported Layers"] layer] removeAnimationForKey:@"Grow_ScaleY"];
	[[self.viewsByName[@"Imported Layers"] layer] removeAnimationForKey:@"Grow_TranslationX"];
	[[self.viewsByName[@"Imported Layers"] layer] removeAnimationForKey:@"Grow_TranslationY"];
}

- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag
{
	void (^completion)(BOOL) = [self.completionBlocksByAnimation objectForKey:anim];
	[self.completionBlocksByAnimation removeObjectForKey:anim];
	if (completion)
	{
		completion(flag);
	}
}

- (void)removeAllAnimations
{
	for (UIView *view in self.viewsByName.allValues)
	{
		[view.layer removeAllAnimations];
	}
	[self.layer removeAnimationForKey:@"Grow"];
}

@end