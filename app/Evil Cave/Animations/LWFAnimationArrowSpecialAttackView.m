//
// LWFAnimationArrowSpecialAttackView.m
// Generated by Core Animator version 1.0 on 5/12/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

#import "LWFAnimationArrowSpecialAttackView.h"

@interface LWFAnimationArrowSpecialAttackView ()
@property (strong, nonatomic) NSMapTable *completionBlocksByAnimation;
@end

@implementation LWFAnimationArrowSpecialAttackView

#pragma mark - Life Cycle

- (instancetype)init
{
	return [self initWithFrame:CGRectMake(0,0,80,80)];
}

- (instancetype)initWithFrame:(CGRect)frame
{
	self = [super initWithFrame:frame];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

#pragma mark - Scaling

- (void)layoutSubviews
{
	[super layoutSubviews];

	UIView *scalingView = self.viewsByName[@"__scaling__"];
	float xScale = self.bounds.size.width / scalingView.bounds.size.width;
	float yScale = self.bounds.size.height / scalingView.bounds.size.height;
	switch (self.contentMode) {
		case UIViewContentModeScaleToFill:
			break;
		case UIViewContentModeScaleAspectFill:
		{
			float scale = MAX(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
		default:
		{
			float scale = MIN(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
	}
	scalingView.transform = CGAffineTransformMakeScale(xScale, yScale);
	scalingView.center = CGPointMake(CGRectGetMidX(self.bounds), CGRectGetMidY(self.bounds));
}

#pragma mark - Setup

- (void)setupHierarchy
{
	self.completionBlocksByAnimation = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory valueOptions:NSPointerFunctionsStrongMemory];
	NSMutableDictionary *viewsByName = [NSMutableDictionary dictionary];
	NSBundle *bundle = [NSBundle bundleForClass:[self class]];

	UIView *__scaling__ = [UIView new];
	__scaling__.bounds = CGRectMake(0, 0, 80, 80);
	__scaling__.center = CGPointMake(40.0, 40.0);
	__scaling__.layer.masksToBounds = YES;
	[self addSubview:__scaling__];
	viewsByName[@"__scaling__"] = __scaling__;

	UIImageView *arrowFlipped = [UIImageView new];
	arrowFlipped.bounds = CGRectMake(0, 0, 37.0, 61.0);
	UIImage *imgArrowFlipped = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"arrow-flipped.png" ofType:nil]];
	arrowFlipped.image = imgArrowFlipped;
	arrowFlipped.contentMode = UIViewContentModeCenter;
	arrowFlipped.layer.position = CGPointMake(66.622, 67.179);
	arrowFlipped.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(5.74), 0.07, 0.07);
	[__scaling__ addSubview:arrowFlipped];
	viewsByName[@"arrow-flipped"] = arrowFlipped;

	self.viewsByName = viewsByName;
}

#pragma mark - grow

- (void)addGrowAnimation
{
	[self addGrowAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addGrowAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addGrowAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addGrowAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addGrowAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addGrowAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addGrowAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addGrowAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
	CAMediaTimingFunction *easeInOutTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
	CAMediaTimingFunction *easeOutTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];
	CAMediaTimingFunction *easeInTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 0.500;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"Grow"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"Grow"]];
	}

	CAKeyframeAnimation *arrowFlippedScaleXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.x"];
	arrowFlippedScaleXAnimation.duration = 0.500;
	arrowFlippedScaleXAnimation.values = @[@(0.072), @(0.809)];
	arrowFlippedScaleXAnimation.keyTimes = @[@(0.000), @(1.000)];
	arrowFlippedScaleXAnimation.timingFunctions = @[easeInTiming];
	arrowFlippedScaleXAnimation.beginTime = beginTime;
	arrowFlippedScaleXAnimation.fillMode = fillMode;
	arrowFlippedScaleXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"arrow-flipped"] layer] addAnimation:arrowFlippedScaleXAnimation forKey:@"grow_ScaleX"];

	CAKeyframeAnimation *arrowFlippedScaleYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.y"];
	arrowFlippedScaleYAnimation.duration = 0.500;
	arrowFlippedScaleYAnimation.values = @[@(0.072), @(0.809)];
	arrowFlippedScaleYAnimation.keyTimes = @[@(0.000), @(1.000)];
	arrowFlippedScaleYAnimation.timingFunctions = @[easeInOutTiming];
	arrowFlippedScaleYAnimation.beginTime = beginTime;
	arrowFlippedScaleYAnimation.fillMode = fillMode;
	arrowFlippedScaleYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"arrow-flipped"] layer] addAnimation:arrowFlippedScaleYAnimation forKey:@"grow_ScaleY"];

	CAKeyframeAnimation *arrowFlippedTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	arrowFlippedTranslationXAnimation.duration = 0.500;
	arrowFlippedTranslationXAnimation.values = @[@(0.000), @(-23.265)];
	arrowFlippedTranslationXAnimation.keyTimes = @[@(0.000), @(1.000)];
	arrowFlippedTranslationXAnimation.timingFunctions = @[linearTiming];
	arrowFlippedTranslationXAnimation.beginTime = beginTime;
	arrowFlippedTranslationXAnimation.fillMode = fillMode;
	arrowFlippedTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"arrow-flipped"] layer] addAnimation:arrowFlippedTranslationXAnimation forKey:@"grow_TranslationX"];

	CAKeyframeAnimation *arrowFlippedTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	arrowFlippedTranslationYAnimation.duration = 0.500;
	arrowFlippedTranslationYAnimation.values = @[@(0.000), @(-12.282)];
	arrowFlippedTranslationYAnimation.keyTimes = @[@(0.000), @(1.000)];
	arrowFlippedTranslationYAnimation.timingFunctions = @[easeOutTiming];
	arrowFlippedTranslationYAnimation.beginTime = beginTime;
	arrowFlippedTranslationYAnimation.fillMode = fillMode;
	arrowFlippedTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"arrow-flipped"] layer] addAnimation:arrowFlippedTranslationYAnimation forKey:@"grow_TranslationY"];
}

- (void)removeGrowAnimation
{
	[self.layer removeAnimationForKey:@"Grow"];
	[[self.viewsByName[@"arrow-flipped"] layer] removeAnimationForKey:@"grow_ScaleX"];
	[[self.viewsByName[@"arrow-flipped"] layer] removeAnimationForKey:@"grow_ScaleY"];
	[[self.viewsByName[@"arrow-flipped"] layer] removeAnimationForKey:@"grow_TranslationX"];
	[[self.viewsByName[@"arrow-flipped"] layer] removeAnimationForKey:@"grow_TranslationY"];
}

- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag
{
	void (^completion)(BOOL) = [self.completionBlocksByAnimation objectForKey:anim];
	[self.completionBlocksByAnimation removeObjectForKey:anim];
	if (completion)
	{
		completion(flag);
	}
}

- (void)removeAllAnimations
{
	for (UIView *view in self.viewsByName.allValues)
	{
		[view.layer removeAllAnimations];
	}
	[self.layer removeAnimationForKey:@"Grow"];
}

@end